name: Build

on: [push, pull_request]

jobs:
  linux:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        cxx: [ clang++, g++ ]
        #env:
        #  - { cc: clang, cxx: clang++ }
        #  - { cc: gcc, cxx: g++ }
    steps:
    - uses: actions/checkout@v2
    - name: Install Grantlee
      run: sudo apt install libgrantlee5-dev
    - name: Build
      env:
        CXX: ${{ maxtrix.cxx }}
      #env: { CC: ${{ matrix.env.cc }}, CXX: ${{ maxtrix.env.cxx }} }
      run: |
        cmake -S "$GITHUB_WORKSPACE"  -B "$RUNNER_TEMP"
        cmake --build "$RUNNER_TEMP" --target codegen QtAwsAcm QtAwsCore QtAwsS3 QtAwsS3Control QtAwsXRay

  linux-clang-qts:
    runs-on: ubuntu-latest
    strategy: { matrix: { qt: [ '5.12.10', '5.15.0' ] } }
    steps:
    - uses: actions/checkout@v2
    - name: Install Tools
      run: sudo apt install clang
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt }}
    - name: Build
      env: { CC: clang, CXX: clang++ }
      run: |
        # We don't build codegen when using jurplel Qt's, because installing libgrantlee5-dev
        #  pulls in Ubuntu's own Qt5 libraries, which is not ideal.
        cmake -D BUILD_CODEGEN=NO -S "$GITHUB_WORKSPACE"  -B "$RUNNER_TEMP"
        cmake --build "$RUNNER_TEMP" --target QtAwsAcm QtAwsCore QtAwsS3 QtAwsS3Control QtAwsXRay

  linux-gcc-qts:
    runs-on: ubuntu-latest
    strategy: { matrix: { qt: [ '5.12.10', '5.15.0' ] } }
    steps:
    - uses: actions/checkout@v2
    - name: Install Tools
      run: sudo apt install gcc
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt }}
    - name: Build
      env: { CC: gcc, CXX: g++ }
      run: |
        # We don't build codegen when using jurplel Qt's, because installing libgrantlee5-dev
        #  pulls in Ubuntu's own Qt5 libraries, which is not ideal.
        cmake -D BUILD_CODEGEN=NO -S "$GITHUB_WORKSPACE"  -B "$RUNNER_TEMP"
        cmake --build "$RUNNER_TEMP" --target QtAwsAcm QtAwsCore QtAwsS3 QtAwsS3Control QtAwsXRay

  macos-clang:
    runs-on: macOS-latest
    strategy: { matrix: { qt: [ '5.12.10', '5.15.0' ] } }
    steps:
    - uses: actions/checkout@v2
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt }}
    - name: Build
      env: { CC: clang, CXX: clang++ }
      run: |
        # @todo Enable codegen builds too, when we have Grantlee available on MacOS.
        cmake -D BUILD_CODEGEN=NO -S "$GITHUB_WORKSPACE"  -B "$RUNNER_TEMP"
        cmake --build "$RUNNER_TEMP" --target QtAwsAcm QtAwsCore QtAwsS3 QtAwsS3Control QtAwsXRay

  macos-gcc:
    runs-on: macOS-latest
    strategy: { matrix: { qt: [ '5.12.10', '5.15.0' ] } }
    steps:
    - uses: actions/checkout@v2
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt }}
    - name: Build
      env: { CC: gcc-11, CXX: g++-11 }
      run: |
        # @todo Enable codegen builds too, when we have Grantlee available on MacOS.
        cmake -D BUILD_CODEGEN=NO -S "$GITHUB_WORKSPACE"  -B "$RUNNER_TEMP"
        cmake --build "$RUNNER_TEMP" --target QtAwsAcm QtAwsCore QtAwsS3 QtAwsS3Control QtAwsXRay

  # @todo windows-mingw

  # @todo windows-msvc
